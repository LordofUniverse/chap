#include "ooo_cpu.h"
#include <cstdlib>
#include <bitset>
#include <stdlib.h>  
#include <iostream>

#define BIMODAL_TABLE_SIZE 4096
#define BANK_TABLE_SIZE 1024
#define GLOBAL_HISTORY_LENGTH 80
#define INITCOUNTER 3 

// int global_history[GLOBAL_HISTORY_LENGTH];
bitset<GLOBAL_HISTORY_LENGTH> GHR;
bitset<GLOBAL_HISTORY_LENGTH> temp;
bitset<GLOBAL_HISTORY_LENGTH> mask;
bitset<GLOBAL_HISTORY_LENGTH> CSR1_mask;
bitset<GLOBAL_HISTORY_LENGTH> CSR2_mask;

// Track X bank
uint64_t bank_chosen;
uint64_t bank_pred;
uint64_t tag;
uint64_t index0;
uint64_t index1;
uint64_t index2;
uint64_t index3;
uint64_t index4;

int bank4_predictions = 0;
int bank4_corr_predictions = 0;
int bank3_predictions = 0;
int bank3_corr_predictions = 0;
int bank2_predictions = 0;
int bank2_corr_predictions = 0;
int bank1_predictions = 0;
int bank1_corr_predictions = 0;
int bank0_predictions = 0;
int bank0_corr_predictions = 0;

class BimodalCell {
    public:
    uint64_t counter;
    uint64_t m;
    uint64_t msb;

     BimodalCell() {
        this->counter = INITCOUNTER;
        this->m = 0;
        this->msb = 1;
    }

    void update(uint64_t counter) {
        this->counter = counter;
        this->m = 0;
        this->msb = (counter >> 2);
    }
};

class BankCell {
    public: 
    uint64_t counter;
    uint64_t tag;
    uint64_t u;
    uint64_t msb;

    void Bankcell() {
        this->counter = INITCOUNTER;
        this->tag = 0;
        this->u = 0;
        this->msb = 1;
    }

    void update(uint64_t tag, uint64_t counter) {
        this->counter = counter;
        this->tag = tag;
        this->u = 0;
        this->msb = (counter >> 2);
        // cout<< int(counter) << " bank msb " << int(this->msb) << endl;
    }
};

class BimodalTable {
    public:
    BimodalCell* bimodaltable[BIMODAL_TABLE_SIZE];

    BimodalTable() {
        for(int i = 0; i < BIMODAL_TABLE_SIZE; i++) {
            bimodaltable[i] = new BimodalCell();
        }
    }

    BimodalCell* getindex(uint64_t index) {
        return bimodaltable[index];
    }

    void update_counter(uint64_t index, uint64_t taken) {
        uint64_t bank_ctr = bimodaltable[index]->counter;
        if (taken) {
            if (bank_ctr < 7) {
                bimodaltable[index]->counter += 1;
                bimodaltable[index]->msb = (bimodaltable[index]->counter >> 2);
            }
        } else {
            if (bank_ctr > 0) {
                bimodaltable[index]->counter -= 1;
                bimodaltable[index]->msb = (bimodaltable[index]->counter >> 2);
            }
        }
    }
};

class BankTable {
    public:
    BankCell* banktable[BANK_TABLE_SIZE];
    uint64_t bankNo;

    BankTable(uint64_t bankNo) {
        this->bankNo = bankNo;
        for(int i = 0; i < BANK_TABLE_SIZE; i++) {
            banktable[i] = new BankCell();
        }
    }

    BankCell* getindex(uint64_t index) {
        return banktable[index];
    }

    void update_counter(uint64_t index, uint64_t taken) {
        uint64_t bank_ctr = banktable[index]->counter;
        if (taken) {
            if (bank_ctr < 7) {
                banktable[index]->counter += 1;
                banktable[index]->msb = (banktable[index]->counter >> 2);
            }
        } else {
            if (bank_ctr > 0) {
                banktable[index]->counter -= 1;
                banktable[index]->msb = (banktable[index]->counter >> 2);
            }
        }
    }

    void update(uint64_t bank_m, uint64_t taken, uint64_t m, uint64_t index, uint64_t tag) {
        uint64_t newctr = 0;
        
        if (bank_m) {
            if (taken) {
                newctr = 4;
            } else {
                newctr = 3;
            }
        } else {
            if (m) {
                newctr = 4; 
            } else {
                newctr = 3; 
            }
        }

        banktable[index]->update(tag, newctr);
    }
};


// 4 bits -> 3 for counter, 1 for m
BimodalTable* bimodal_table;

// 12 bits -> 3 for counter, 8 for tag, 1 for u
BankTable* bank1_table;
BankTable* bank2_table;
BankTable* bank3_table;
BankTable* bank4_table;

void O3_CPU::initialize_branch_predictor() {

    cout << "CPU " << cpu << " CBP PPM branch predictor" << endl;

    bimodal_table = new BimodalTable();
    bank1_table = new BankTable(1);
    bank2_table = new BankTable(2);
    bank3_table = new BankTable(3);
    bank4_table = new BankTable(4);

    for(int i = 0; i < GLOBAL_HISTORY_LENGTH; i++) {
        if (i > 9) {
            mask.set(i, 0);
        } else {
            mask.set(i, 1);
        }

        if (i > 7) {
            CSR1_mask.set(i, 0);
        } else {
            CSR1_mask.set(i, 1);
        }
        
        if (i > 6) {
            CSR2_mask.set(i, 0);
        } else {
            CSR2_mask.set(i, 1);
        }
    }

    bank_chosen = 0;
    bank_pred = 0;
    tag = 0;
    index0 = 0;
    index1 = 0;
    index2 = 0;
    index3 = 0;
    index4 = 0;

    GHR.reset();
    temp.reset();

}

// 94.9944 -> bimodal
// 95.6281 -> index1 = (ip & ~(~0 << 10)) ^ (temp &= mask).to_ulong();
// 95.6328 -> index1 = (ip & ~(~0 << 10)) ^ ((ip >> 10) & ~(~0 << 10)) ^ (temp &= mask).to_ulong();
// 95.4564 -> ltage
// 95.6459 -> if i remove srand(1)

uint8_t O3_CPU::predict_branch(uint64_t ip) {
    
    temp = GHR;

    index0 = (ip & ~(~0 << 12));

    index1 = (ip & ~(~0 << 10)) ^ ((ip >> 10) & ~(~0 << 10)) ^ (temp &= mask).to_ulong();
    temp = GHR;
    temp >>= 10;
    index2 = index1 ^ (temp &= mask).to_ulong();
    temp = GHR;
    temp >>= 20;
    index3 = index2 ^ (temp &= mask).to_ulong();
    temp = GHR;
    temp >>= 30;
    index3 = index3 ^ (temp &= mask).to_ulong();
    temp = GHR;
    temp >>= 40;
    index4 = index3 ^ (temp &= mask).to_ulong();
    temp = GHR;
    temp >>= 50;
    index4 = index4 ^ (temp &= mask).to_ulong();
    temp = GHR;
    temp >>= 60;
    index4 = index4 ^ (temp &= mask).to_ulong();
    temp = GHR;
    temp >>= 70;
    index4 = index4 ^ (temp &= mask).to_ulong();
    
    BimodalCell* bank0_value = bimodal_table->getindex(index0);
    BankCell* bank1_value = bank1_table->getindex(index1);
    BankCell* bank2_value = bank2_table->getindex(index2);
    BankCell* bank3_value = bank3_table->getindex(index3);
    BankCell* bank4_value = bank4_table->getindex(index4);

    temp = GHR;

    tag = (ip & ~(~0 << 8)) ^ (temp &= CSR1_mask).to_ulong();
    temp = GHR;
    temp >>= 8;
    tag = tag ^ ((temp &= CSR2_mask).to_ulong() << 1);

    uint64_t bank0_value_pred = bank0_value->msb;

    uint64_t bank1_value_tag = bank1_value->tag;
    uint64_t bank1_value_pred = bank1_value->msb;
    uint64_t bank2_value_tag = bank2_value->tag;
    uint64_t bank2_value_pred = bank2_value->msb;
    uint64_t bank3_value_tag = bank3_value->tag;
    uint64_t bank3_value_pred = bank3_value->msb;
    uint64_t bank4_value_tag = bank4_value->tag;
    uint64_t bank4_value_pred = bank4_value->msb;
    
    if (bank4_value_tag == tag) {
        bank_chosen = 4;
        bank_pred = bank4_value_pred;
        return bank4_value_pred;
    } else if (bank3_value_tag == tag) {
        bank_chosen = 3;
        bank_pred = bank3_value_pred;
        return bank3_value_pred;
    } else if (bank2_value_tag == tag) {
        bank_chosen = 2;
        bank_pred = bank2_value_pred;
        return bank2_value_pred;
    } else if (bank1_value_tag == tag) {
        bank_chosen = 1;
        bank_pred = bank1_value_pred;
        return bank1_value_pred;
    } else {
        bank_chosen = 0;
        bank_pred = bank0_value_pred;
        return bank0_value_pred;
    }

}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken) {
    srand(1);
    GHR = (GHR << 1);
    GHR.set(0, taken);

    // update counter
    if (bank_chosen == 4) {
        bank4_predictions++;
        if (bank_pred == taken) {
            bank4_corr_predictions++;
        }
        bank4_table->update_counter(index4, taken);
    } else if (bank_chosen == 3) {
        bank3_predictions++;
        if (bank_pred == taken) {
            bank3_corr_predictions++;
        }
        bank3_table->update_counter(index3, taken);
    } else if (bank_chosen == 2) {
        bank2_predictions++;
        if (bank_pred == taken) {
            bank2_corr_predictions++;
        }
        bank2_table->update_counter(index2, taken);
    } else if (bank_chosen == 1) {
        bank1_predictions++;
        if (bank_pred == taken) {
            bank1_corr_predictions++;
        }
        bank1_table->update_counter(index1, taken);
    } else {
        bank0_predictions++;
        if (bank_pred == taken) {
            bank0_corr_predictions++;
        }
        bimodal_table->update_counter(index0, taken);
    }


    // X <= 3
    if (bank_pred != taken) {

        uint64_t bank_m = bimodal_table->getindex(index0)->m;
        uint64_t bank4_u = bank4_table->getindex(index4)->u;
        uint64_t bank3_u = bank3_table->getindex(index3)->u;
        uint64_t bank2_u = bank2_table->getindex(index2)->u;
        uint64_t bank1_u = bank1_table->getindex(index1)->u;
        uint64_t bimodal_msb = bimodal_table->getindex(index0)->msb;
        
        if (bank_chosen == 3) {

            bank4_table->update(bank_m, taken, bimodal_msb, index4, tag);
            
        } else if (bank_chosen == 2) {

            if (bank4_u && bank3_u) {
                uint64_t random_choice = rand() % 2;
                if (random_choice == 0) {
                    bank4_table->update(bank_m, taken, bimodal_msb, index4, tag);
                } else {
                    bank3_table->update(bank_m, taken, bimodal_msb, index3, tag);
                }
            } else {
                if (!bank4_u) {
                    bank4_table->update(bank_m, taken, bimodal_msb, index4, tag);
                }

                if (!bank3_u) {
                    bank3_table->update(bank_m, taken, bimodal_msb, index3, tag);
                }
            }

            
        } else if (bank_chosen == 1) {

            if (bank4_u && bank3_u && bank2_u) {
                uint64_t random_choice = rand() % 3;
                if (random_choice == 0) {
                    bank4_table->update(bank_m, taken, bimodal_msb, index4, tag);

                } else if (random_choice == 1) {
                    bank3_table->update(bank_m, taken, bimodal_msb, index3, tag);

                } else {
                    bank2_table->update(bank_m, taken, bimodal_msb, index2, tag);

                }
            } else {
                if (!bank4_u) {
                    bank4_table->update(bank_m, taken, bimodal_msb, index4, tag);
                }

                if (!bank3_u) {
                    bank3_table->update(bank_m, taken, bimodal_msb, index3, tag);
                }

                if (!bank2_u) {
                    bank2_table->update(bank_m, taken, bimodal_msb, index2, tag);

                }
            }

        } else if (bank_chosen == 0) {

            if (bank4_u && bank3_u && bank2_u && bank1_u) {
                uint64_t random_choice = rand() % 4;
                if (random_choice == 0) {
                    bank4_table->update(bank_m, taken, bimodal_msb, index4, tag);

                } else if (random_choice == 1) {
                    bank3_table->update(bank_m, taken, bimodal_msb, index3, tag);

                } else if (random_choice == 2) {
                    bank2_table->update(bank_m, taken, bimodal_msb, index2, tag);

                } else {
                    bank1_table->update(bank_m, taken, bimodal_msb, index1, tag);
                }
            } else {
                if (!bank4_u) {
                    bank4_table->update(bank_m, taken, bimodal_msb, index4, tag);
                }

                if (!bank3_u) {
                    bank3_table->update(bank_m, taken, bimodal_msb, index3, tag);
                }

                if (!bank2_u) {
                   bank2_table->update(bank_m, taken, bimodal_msb, index2, tag);
                }

                if (!bank1_u) {
                    bank1_table->update(bank_m, taken, bimodal_msb, index1, tag);
                }
            }
        }

    }

    if (bank_pred != bimodal_table->getindex(index0)->msb) {

        if (bank_pred == taken) {
            bimodal_table->getindex(index0)->m = 1;
            if (bank_chosen == 1) {
                bank1_table->getindex(index1)->u = 1;
            } else if (bank_chosen == 2) {
                bank2_table->getindex(index2)->u = 1;
            } else if (bank_chosen == 3) {
                bank3_table->getindex(index3)->u = 1;
            } else if (bank_chosen == 4) {
                bank4_table->getindex(index4)->u = 1;
            }
        } else {
            bimodal_table->getindex(index0)->m = 0;
            if (bank_chosen == 1) {
                bank1_table->getindex(index1)->u = 0;
            } else if (bank_chosen == 2) {
                bank2_table->getindex(index2)->u = 0;
            } else if (bank_chosen == 3) {
                bank3_table->getindex(index3)->u = 0;
            } else if (bank_chosen == 4) {
                bank4_table->getindex(index4)->u = 0;
            }
        }
        
    }

    // cout << "bank4 " << bank4_predictions << endl;
    // cout << "bank4 correct " << bank4_corr_predictions << endl;
    // cout << "bank3 " << bank3_predictions << endl;
    // cout << "bank3 correct " << bank3_corr_predictions << endl;
    // cout << "bank2 " << bank2_predictions << endl;
    // cout << "bank2 correct " << bank2_corr_predictions << endl;
    // cout << "bank1 " << bank1_predictions << endl;
    // cout << "bank1 correct " << bank1_corr_predictions << endl;
    // cout << "bank0 " << bank0_predictions << endl;
    // cout << "bank0 correct " << bank0_corr_predictions << endl;
        
}
