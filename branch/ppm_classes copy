#include "ooo_cpu.h"
#include <cstdlib>
#include <bitset>

#define BIMODAL_TABLE_SIZE 4096
#define BANK_TABLE_SIZE 1024
#define GLOBAL_HISTORY_LENGTH 80

// int global_history[GLOBAL_HISTORY_LENGTH];
bitset<GLOBAL_HISTORY_LENGTH> GHR;
bitset<GLOBAL_HISTORY_LENGTH> temp;
bitset<GLOBAL_HISTORY_LENGTH> mask;
bitset<GLOBAL_HISTORY_LENGTH> CSR1_mask;
bitset<GLOBAL_HISTORY_LENGTH> CSR2_mask;

// Track X bank
uint8_t bank_chosen;
uint8_t bank_pred;
uint16_t tag;
uint16_t index0;
uint16_t index1;
uint16_t index2;
uint16_t index3;
uint16_t index4;

// Always put msb value as first digit of counter when u initialising reinitialising couter

class BimodalCell {
    public:
    uint8_t counter;
    uint8_t m;
    uint8_t msb;

    void BimodalCell() {
        counter = 4;
        m = 0;
        msb = 1;
    }

    void increment() {
        if (counter < 7) {
            counter++;
        }
    }

    void decrement() {
        if (counter > 0) {
            counter--;
        }
    }

    void update(uint8_t tag, uint8_t counter) {
        this.counter = counter;
        this.m = 0;
        this.msb = 1;
    }
};

class BankCell {
    public: 
    uint8_t counter;
    uint8_t tag;
    uint8_t u;
    uint8_t msb;

    void Bankcell() {
        counter = 4;
        tag = 0;
        u = 0;
        msb = 1;
    }

    void increment() {
        if (counter < 7) {
            counter++;
        }
    }

    void decrement() {
        if (counter > 0) {
            counter--;
        }
    }

    void update(uint8_t tag, uint8_t counter) {
        this.counter = counter;
        this.tag = tag;
        this.u = 0;
        this.msb = 
    }
};

class BimodalTable {
    public:
    BimodalCell* bimodaltable[BIMODAL_TABLE_SIZE];

    void BimodalTable() {
        for(int i = 0; i < BIMODAL_TABLE_SIZE; i++) {
            bimodal_table[i] = new BimodalCell();
        }
    }

    void getindex(uint16_t index) {
        return bimodaltable[index];
    }

    void update_counter(uint16_t index, uint8_t taken) {
        uint8_t bank_ctr = bimodaltable[index].counter;
        if (taken) {
            if (bank_ctr < 7) {
                bimodaltable[index].counter += 1;
            }
        } else {
            if (bank_ctr > 0) {
                bimodaltable[index].counter -= 1;
            }
        }
    }
};

class BankTable {
    public:
    BankCell* banktable[BANK_TABLE_SIZE];
    uint8_t bankNo;

    void BankTable(uint8_t bankNo) {
        this.bankNo = bankNo;
        for(int i = 0; i < BIMODAL_TABLE_SIZE; i++) {
            banktable[i] = new BankCell();
        }
    }

    void getindex(uint16_t index) {
        return banktable[index];
    }

    void update_counter(uint16_t index, uint8_t taken) {
        uint8_t bank_ctr = banktable[index].counter;
        if (taken) {
            if (bank_ctr < 7) {
                banktable[index].counter += 1;
            }
        } else {
            if (bank_ctr > 0) {
                banktable[index].counter -= 1;
            }
        }
    }

    void update_prediction() {
        if ((4 - bankNo) > 0) {
            uint8_t n = 4 - bankNo;
            
            
            
            uint8_t random_choice = rand() % n;

        }
    }

    void update(uint8_t bank_m, uint8_t taken, uint16_t index0) {
        uint8_t newctr = 0;
        
        if (bank_m) {
            if (taken) {
                newctr = 4;
            } else {
                newctr = 3;
            }
        } else {
            if ((bimodal_table[index0].msb)) {
                newctr = 4; 
            } else {
                newctr = 3; 
            }
        }

        // bank4_table[index4].counter = newctr;
        // bank4_table[index4].msb = (newctr >> 2);
        // bank4_table[index4].tag = tag;
        // bank4_table[index4].u = 0;

        BankCell bank4_value = banktable.getindex(index4);
        bank4_value.update(tag, counter);
    }
};


// 4 bits -> 3 for counter, 1 for m
BimodalTable* bimodal_table;

// 12 bits -> 3 for counter, 8 for tag, 1 for u
BankTable* bank1_table;
BankTable* bank2_table;
BankTable* bank3_table;
BankTable* bank4_table;

void O3_CPU::initialize_branch_predictor() {
    cout << "CPU " << cpu << " CBP PPM branch predictor" << endl;

    BimodalTable* bimodal_table = new BimodalTable();
    BankTable* bank1_table = new BankTable(1);
    BankTable* bank2_table = new BankTable(2);
    BankTable* bank3_table = new BankTable(3);
    BankTable* bank4_table = new BankTable(4);

    for(int i = 0; i < GLOBAL_HISTORY_LENGTH; i++) {
        if (i > 9) {
            mask.set(i, 0);
        } else {
            mask.set(i, 1);
        }

        if (i > 7) {
            CSR1_mask.set(i, 0);
        } else {
            CSR1_mask.set(i, 1);
        }
        
        if (i > 6) {
            CSR2_mask.set(i, 0);
        } else {
            CSR2_mask.set(i, 1);
        }
    }

    bank_chosen = 0;
    bank_pred = 0;
    tag = 0;

    GHR.reset();
    temp.reset();

}

uint8_t O3_CPU::predict_branch(uint64_t ip) {
    
    temp = GHR;

    index0 = (ip & ~(~0 << 12));

    index1 = (ip & ~(~0 << 10)) ^ (temp &= mask).to_ulong();
    temp = GHR;
    temp >>= 10;
    index2 = index1 ^ (temp &= mask).to_ulong();
    temp = GHR;
    temp >>= 20;
    index3 = index2 ^ (temp &= mask).to_ulong();
    temp = GHR;
    temp >>= 30;
    index3 = index3 ^ (temp &= mask).to_ulong();
    temp = GHR;
    temp >>= 40;
    index4 = index3 ^ (temp &= mask).to_ulong();
    temp = GHR;
    temp >>= 50;
    index4 = index4 ^ (temp &= mask).to_ulong();
    temp = GHR;
    temp >>= 60;
    index4 = index4 ^ (temp &= mask).to_ulong();
    temp = GHR;
    temp >>= 70;
    index4 = index4 ^ (temp &= mask).to_ulong();
    
    BimodalCell bank0_value = bimodal_table.getindex(index0);
    BankCell bank1_value = bank1_table.getindex(index1);
    BankCell bank2_value = bank2_table.getindex(index2);
    BankCell bank3_value = bank3_table.getindex(index3);
    BankCell bank4_value = bank4_table.getindex(index4);

    temp = GHR;

    tag = (ip & ~(~0 << 8)) ^ (temp &= CSR1_mask).to_ulong();
    temp >>= 8;
    temp = GHR;
    tag = tag ^ ((temp &= CSR2_mask).to_ulong() << 1);

    uint16_t bank0_value_pred = bank0_value.msb;

    uint16_t bank1_value_tag = bank1_value.tag;
    uint16_t bank1_value_pred = bank1_value.msb;
    uint16_t bank2_value_tag = bank2_value.tag;
    uint16_t bank2_value_pred = bank2_value.msb;
    uint16_t bank3_value_tag = bank3_value.tag;
    uint16_t bank3_value_pred = bank3_value.msb;
    uint16_t bank4_value_tag = bank4_value.tag;
    uint16_t bank4_value_pred = bank4_value.msb;
    
    if (bank4_value_tag == tag) {
        bank_chosen = 4;
        bank_pred = bank4_value_pred;
        return bank4_value_pred;
    } else if (bank3_value_tag == tag) {
        bank_chosen = 3;
        bank_pred = bank3_value_pred;
        return bank3_value_pred;
    } else if (bank2_value_tag == tag) {
        bank_chosen = 2;
        bank_pred = bank2_value_pred;
        return bank2_value_pred;
    } else if (bank1_value_tag == tag) {
        bank_chosen = 1;
        bank_pred = bank1_value_pred;
        return bank1_value_pred;
    } else {
        bank_chosen = 0;
        bank_pred = bank0_value_pred;
        return bank0_value_pred;
    }

}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken) {

    GHR = (GHR << 1);
    GHR.set(0, taken);

    // update counter
    if (bank_chosen == 4) {
        bank4_table.update_counter(index4, taken);
    } else if (bank_chosen == 3) {
        bank3_table.update_counter(index3, taken);
    } else if (bank_chosen == 2) {
        bank2_table.update_counter(index2, taken);
    } else if (bank_chosen == 1) {
        bank1_table.update_counter(index1, taken);
    } else {
        bimodal_table.update_counter(index0, taken);
    }


    // X <= 3
    if (bank_pred != taken) {

        if (bank_chosen == 3) {

            uint8_t bank4_u = bank4_table[index4].u;
            uint8_t bank_m = bimodal_table[index0].m;
            uint8_t newctr = 0;

            if (bank_m) {
                if (taken) {
                    newctr = 4;
                } else {
                    newctr = 3;
                }
            } else {
                if ((bimodal_table[index0].msb)) {
                    newctr = 4; 
                } else {
                    newctr = 3; 
                }
            }

            bank4_table[index4].counter = newctr;
            bank4_table[index4].msb = (newctr >> 2);
            bank4_table[index4].tag = tag;
            bank4_table[index4].u = 0;

            
        } else if (bank_chosen == 2) {

            uint16_t bank4_u = bank4_table[index4].u;
            uint16_t bank3_u = bank3_table[index3].u;
            uint16_t bank_m = bimodal_table[index0].m;
            uint8_t newctr = 0;

            if (bank4_u && bank3_u) {
                uint8_t random_choice = rand() % 2;
                if (random_choice == 0) {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank4_table[index4].counter = newctr;
                    bank4_table[index4].msb = (newctr >> 2);
                    bank4_table[index4].tag = tag;
                    bank4_table[index4].u = 0;
                } else {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank3_table[index3].counter = newctr;
                    bank3_table[index3].msb = (newctr >> 2);
                    bank3_table[index3].tag = tag;
                    bank3_table[index3].u = 0;

                }
            } else {
                if (!bank4_u) {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank4_table[index4].counter = newctr;
                    bank4_table[index4].msb = (newctr >> 2);
                    bank4_table[index4].tag = tag;
                    bank4_table[index4].u = 0;
                }

                if (!bank3_u) {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank3_table[index3].counter = newctr;
                    bank3_table[index3].msb = (newctr >> 2);
                    bank3_table[index3].tag = tag;
                    bank3_table[index3].u = 0;
                }
            }

            
        } else if (bank_chosen == 1) {

            uint16_t bank4_u = bank4_table[index4].u;
            uint16_t bank3_u = bank3_table[index3].u;
            uint16_t bank2_u = bank2_table[index2].u;
            uint16_t bank_m = bimodal_table[index0].m;
            uint8_t newctr = 0;

            if (bank4_u && bank3_u && bank2_u) {
                uint8_t random_choice = rand() % 3;
                if (random_choice == 0) {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank4_table[index4].counter = newctr;
                    bank4_table[index4].msb = (newctr >> 2);
                    bank4_table[index4].tag = tag;
                    bank4_table[index4].u = 0;

                } else if (random_choice == 1) {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank3_table[index3].counter = newctr;
                    bank3_table[index3].msb = (newctr >> 2);
                    bank3_table[index3].tag = tag;
                    bank3_table[index3].u = 0;

                } else {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank2_table[index2].counter = newctr;
                    bank2_table[index2].msb = (newctr >> 2);
                    bank2_table[index2].tag = tag;
                    bank2_table[index2].u = 0;

                }
            } else {
                if (!bank4_u) {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank4_table[index4].counter = newctr;
                    bank4_table[index4].msb = (newctr >> 2);
                    bank4_table[index4].tag = tag;
                    bank4_table[index4].u = 0;
                }

                if (!bank3_u) {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank3_table[index3].counter = newctr;
                    bank3_table[index3].msb = (newctr >> 2);
                    bank3_table[index3].tag = tag;
                    bank3_table[index3].u = 0;

                }

                if (!bank2_u) {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank2_table[index2].counter = newctr;
                    bank2_table[index2].msb = (newctr >> 2);
                    bank2_table[index2].tag = tag;
                    bank2_table[index2].u = 0;

                }
            }

        } else if (bank_chosen == 0) {

            uint16_t bank4_u = bank4_table[index4].u;
            uint16_t bank3_u = bank3_table[index3].u;
            uint16_t bank2_u = bank2_table[index2].u;
            uint16_t bank1_u = bank1_table[index1].u;
            uint16_t bank_m = bimodal_table[index0].m;
            uint8_t newctr = 0;

            if (bank4_u && bank3_u && bank2_u && bank1_u) {
                uint8_t random_choice = rand() % 4;
                if (random_choice == 0) {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank4_table[index4].counter = newctr;
                    bank4_table[index4].msb = (newctr >> 2);
                    bank4_table[index4].tag = tag;
                    bank4_table[index4].u = 0;

                } else if (random_choice == 1) {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank3_table[index3].counter = newctr;
                    bank3_table[index3].msb = (newctr >> 2);
                    bank3_table[index3].tag = tag;
                    bank3_table[index3].u = 0;

                } else if (random_choice == 2) {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank2_table[index2].counter = newctr;
                    bank2_table[index2].msb = (newctr >> 2);
                    bank2_table[index2].tag = tag;
                    bank2_table[index2].u = 0;

                } else {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank1_table[index1].counter = newctr;
                    bank1_table[index1].msb = (newctr >> 2);
                    bank1_table[index1].tag = tag;
                    bank1_table[index1].u = 0;
                }
            } else {
                if (!bank4_u) {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank4_table[index4].counter = newctr;
                    bank4_table[index4].msb = (newctr >> 2);
                    bank4_table[index4].tag = tag;
                    bank4_table[index4].u = 0;

                }

                if (!bank3_u) {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank3_table[index3].counter = newctr;
                    bank3_table[index3].msb = (newctr >> 2);
                    bank3_table[index3].tag = tag;
                    bank3_table[index3].u = 0;
                }

                if (!bank2_u) {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank2_table[index2].counter = newctr;
                    bank2_table[index2].msb = (newctr >> 2);
                    bank2_table[index2].tag = tag;
                    bank2_table[index2].u = 0;

                }

                if (!bank1_u) {
                    if (bank_m) {
                        if (taken) {
                            newctr = 4;
                        } else {
                            newctr = 3;
                        }
                    } else {
                        if ((bimodal_table[index0].msb)) {
                            newctr = 4; 
                        } else {
                            newctr = 3; 
                        }
                    }

                    bank1_table[index1].counter = newctr;
                    bank1_table[index1].msb = (newctr >> 2);
                    bank1_table[index1].tag = tag;
                    bank1_table[index1].u = 0;
                }
            }
        }

    }

    if (bank_chosen != 0) {

        if (bank_pred == taken) {
            bimodal_table[index0].m = 1;
            if (bank_chosen == 1) {
                bank1_table[index1].u = 1;
            } else if (bank_chosen == 2) {
                bank2_table[index2].u = 1;
            } else if (bank_chosen == 3) {
                bank3_table[index3].u = 1;
            } else if (bank_chosen == 4) {
                bank4_table[index4].u = 1;
            }
        } else {
            bimodal_table[index0].m = 0;
            if (bank_chosen == 1) {
                bank1_table[index1].u = 0;
            } else if (bank_chosen == 2) {
                bank2_table[index2].u = 0;
            } else if (bank_chosen == 3) {
                bank3_table[index3].u = 0;
            } else if (bank_chosen == 4) {
                bank4_table[index4].u = 0;
            }
        }
        
    }
        
}
